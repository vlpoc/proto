// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Authenticate(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthenticateClient, error)
	// Validate returns Empty if AuthCert is successfully validated and
	// returns an error if AuthCert is not valid.
	Validate(ctx context.Context, in *AuthCert, opts ...grpc.CallOption) (*Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Authenticate(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthenticateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auth_ServiceDesc.Streams[0], "/auth.Auth/Authenticate", opts...)
	if err != nil {
		return nil, err
	}
	x := &authAuthenticateClient{stream}
	return x, nil
}

type Auth_AuthenticateClient interface {
	Send(*AuthMsg) error
	Recv() (*AuthMsg, error)
	grpc.ClientStream
}

type authAuthenticateClient struct {
	grpc.ClientStream
}

func (x *authAuthenticateClient) Send(m *AuthMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authAuthenticateClient) Recv() (*AuthMsg, error) {
	m := new(AuthMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authClient) Validate(ctx context.Context, in *AuthCert, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/auth.Auth/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Authenticate(Auth_AuthenticateServer) error
	// Validate returns Empty if AuthCert is successfully validated and
	// returns an error if AuthCert is not valid.
	Validate(context.Context, *AuthCert) (*Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Authenticate(Auth_AuthenticateServer) error {
	return status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthServer) Validate(context.Context, *AuthCert) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Authenticate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServer).Authenticate(&authAuthenticateServer{stream})
}

type Auth_AuthenticateServer interface {
	Send(*AuthMsg) error
	Recv() (*AuthMsg, error)
	grpc.ServerStream
}

type authAuthenticateServer struct {
	grpc.ServerStream
}

func (x *authAuthenticateServer) Send(m *AuthMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authAuthenticateServer) Recv() (*AuthMsg, error) {
	m := new(AuthMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Auth_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Validate(ctx, req.(*AuthCert))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Auth_Validate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Authenticate",
			Handler:       _Auth_Authenticate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auth/auth.proto",
}
