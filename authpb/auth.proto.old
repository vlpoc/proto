syntax = "proto3";
package auth;
option go_package = "github.com/vlpoc/proto/auth";

// The auth service is responsible for authenticating actors in the
// system.
service Auth {
	rpc Authenticate (stream AuthMsg) returns (stream AuthMsg);
	// Validate returns Empty if AuthCert is successfully validated and 
	// returns an error if AuthCert is not valid.
	rpc Validate (AuthCert) returns (Empty);
}

message AuthMsg {
	oneof msg {
		Protocols       protos   = 1;
		BeginAuth		begin    = 2;
		// RSA-CERT
		RSAStart		RsaStart = 3;
		RSAProof		proof    = 4;
		AuthCert		cert     = 5;
		// Other messages required for other
		// protocols can be added here.
	}
}

// Neither domain nor name, should contain the characters `/` or `@`, since those
// are used as separators in the Actor's string form, which is
// name/domain@authenticator.
//
// Name should be the name of the actor. The domain should be the domain the actor
// is a member of. Domains just provide a namespace for actors to reside in. This
// may be the empty string if domains are not desired.
//
// Authenticator should be filled out by the client, and will be checked and used
// by the server. It is a url at which the auth server can be reached.
message Actor {
	string	name          = 1;
	string	domain        = 2;
	string	authenticator = 3;
}

message Protocols {
	repeated string	protocols = 1;
}

message BeginAuth {
	string	protocol = 1;
}

// RSA-CERT Messages
message RSAStart {
	string	authenticator = 1;
	bytes	nonce         = 2;
}

message RSAProof {
	Actor		actor     = 1;
	bytes		nonce     = 2;
	bytes		signature = 3;
}

message AuthCert {
	Actor	actor     = 1;
	int64	expire    = 2;
	bytes	nonce     = 3;
	bytes   pubkey    = 4;
	bytes	signature = 5;
}

message Empty {}
